"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(email: String @eq): User @find

    tags: [Tag!]! @all
    tag(slug: String! @eq): Tag@find

    jobs(
        orderBy: _ @orderBy(columns: ["pinned", "created_at"])
        hasTags: _ @whereHasConditions(columns: ["slug"])
    ): [Job!]! @all

    me: User @auth
}

type Tag {
    id: ID!
    title: String!
    slug: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    jobs(
        orderBy: _ @orderBy(columns: ["created_at"])
    ): [Job!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Job {
    id: ID!
    job_title: String!
    job_location: String!
    job_link: String!
    highlighted: Boolean!
    pinned: Boolean!
    company_name: String!
    company_logo: String!
    created_at: DateTime!
    updated_at: DateTime!
    tags: [Tag!]! @belongsToMany
    user: User! @belongsTo
}

input CreateUserInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required", "email"])
    password: String @rules(apply: ["required", "min:5"]) @hash
}

input CreateUserBelongsTo {
    create: CreateUserInput
}

input CreateTagsBelongsToMany {
    connect: [ID!] @rulesForArray(apply: ["required"])
}

input CreateJobInput {
    job_title: String @rules(apply: ["required"])
    job_location: String @rules(apply: ["required"])
    job_link: String @rules(apply: ["required", "url"])
    company_name: String @rules(apply: ["required"])
    company_logo: String @rules(apply: ["required", "url"])
    highlighted: Boolean @rules(apply: ["boolean"])
    pinned: Boolean @rules(apply: ["boolean"])
    user: CreateUserBelongsTo
    tags: CreateTagsBelongsToMany
}

type Mutation {
    createJobAndRegisterUser(input: CreateJobInput! @spread): Job! @create
    createJob(input: CreateJobInput! @spread): Job!
        @guard
        @create
        @inject(context: "user.id", name: "user_id")
}
